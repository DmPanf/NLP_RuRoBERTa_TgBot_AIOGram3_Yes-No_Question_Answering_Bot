import asyncio
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv
import os

from model import load_model_and_tokenizer
from predict import predict_answer

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
load_dotenv()

TOKEN = os.getenv('TG_BOT_TOKEN')
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
router = Router()
dp.include_router(router)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞
model, tokenizer, device = load_model_and_tokenizer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def send_welcome(message: Message):
    sms = "\n–Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ <b>[yes/no]</b> –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ <b>Russian SuperGLUE</b>.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ —Ç–µ–∫—Å—Ç! üëÄ"
    await message.answer(f"üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> {sms}", parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_message(message: Message):
    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –∏ —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω—ã —Å–∏–º–≤–æ–ª–æ–º –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        question, passage = message.text.split('\n', 1)
        answer = predict_answer(question, passage, model, tokenizer, device)
        await message.answer(f"ü™¨ <b>Question:</b> {question}\nüíé <b>Passage:</b> {passage}\n‚ôªÔ∏è <b>Answer:</b> {answer}", parse_mode="HTML")
    except ValueError:
        sms = "üõü –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å '\\n' (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ç–µ–∫—Å—Ç –Ω–∞ –¥—Ä—É–≥–æ–π)."
        await message.answer(sms)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
